/*
 * Schema
*/

-- name: create_schema, scenario: setup
CREATE SCHEMA DBLOAD;

-- name: drop_schema, scenario: teardown[890]
DROP SCHEMA DBLOAD;

/*
 * Departments
*/

-- name: create_departments_table, scenario: setup
CREATE TABLE DBLOAD.DEPARTMENTS (
  ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  NAME VARCHAR(50) UNIQUE
);

-- name: drop_departments_table, scenario: teardown[790]
DROP TABLE DBLOAD.DEPARTMENTS;

-- name: preload_departments, scenario: setup
INSERT INTO DBLOAD.DEPARTMENTS (NAME) (
  SELECT 'Accounting' name FROM DUMMY
  UNION
  SELECT 'Sales EMEA' name FROM DUMMY
  UNION
  SELECT 'Sales APAC' name FROM DUMMY
  UNION
  SELECT 'Sales NA' name FROM DUMMY
  UNION
  SELECT 'Sales LATAM' name FROM DUMMY
  UNION
  SELECT 'Management' name FROM DUMMY
);

-- name: add_department
INSERT INTO DBLOAD.DEPARTMENTS (NAME) VALUES (?);

-- name: get_departments, option: return_random
SELECT * FROM DBLOAD.DEPARTMENTS;

-- name: remove_department
DELETE FROM DBLOAD.DEPARTMENTS WHERE ID = ?;

-- name: modify_department
UPDATE DBLOAD.DEPARTMENTS SET NAME = ? WHERE ID = ?;

-- name: count_departments
SELECT COUNT(*) FROM DBLOAD.DEPARTMENTS;

-- name: find_departments_by_name_like
SELECT * FROM DBLOAD.DEPARTMENTS WHERE NAME LIKE ?;

/*
 * Employees
*/

-- name: create_employees_table, scenario: setup
CREATE TABLE DBLOAD.EMPLOYEES (
  ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  NAME VARCHAR(50) NOT NULL,
  BIRTHDAY DATE NOT NULL,
  DEPARTMENT_ID INTEGER NOT NULL,
  TERMINATED BOOLEAN NOT NULL DEFAULT FALSE,
  FOREIGN KEY (DEPARTMENT_ID)
    REFERENCES DBLOAD.DEPARTMENTS (ID)
);

-- name: drop_employees_table, scenario: teardown[690]
DROP TABLE DBLOAD.EMPLOYEES;

-- name: create_employees_uniq_index, scenario: setup
CREATE UNIQUE INDEX DBLOAD.EMPLOYEES_UNIQ_IDX ON DBLOAD.EMPLOYEES (NAME, BIRTHDAY);

-- name: drop_employees_uniq_index, scenario: teardown[680]
DROP INDEX DBLOAD.EMPLOYEES_UNIQ_IDX;

-- name: create_employees_terminated_index, scenario: setup
CREATE INDEX DBLOAD.EMPLOYEES_TERM_IDX ON DBLOAD.EMPLOYEES (TERMINATED);

-- name: drop_employees_terminated_idx, scenario: teardown[660]
DROP INDEX DBLOAD.EMPLOYEES_TERM_IDX;

-- name: add_employee
INSERT INTO DBLOAD.EMPLOYEES (NAME, BIRTHDAY, DEPARTMENT_ID)
VALUES (?, TO_DATE(?, 'YYYY-MM-DD'), ?);

-- name: get_employees, option: return_random
SELECT * FROM DBLOAD.EMPLOYEES;

-- name: remove_employee
DELETE FROM DBLOAD.EMPLOYEES WHERE ID = ?;

-- name: modify_employee
UPDATE DBLOAD.EMPLOYEES
SET NAME = ?, BIRTHDAY = TO_DATE(?, 'YYYY-MM-DD'), DEPARTMENT_ID = ?, TERMINATED = ?
WHERE ID = ?;

-- name: terminate_employee
UPDATE DBLOAD.EMPLOYEES SET TERMINATED = TRUE WHERE ID = ?;

-- name: restore_employee
UPDATE DBLOAD.EMPLOYEES SET TERMINATED = FALSE WHERE ID = ?;

-- name: count_employees
SELECT COUNT(*) FROM DBLOAD.EMPLOYEES;

-- name: find_employees_by_name_like
SELECT * FROM DBLOAD.EMPLOYEES WHERE NAME LIKE ?;

-- name: find_employees_by_department_id
SELECT * FROM DBLOAD.EMPLOYEES WHERE DEPARTMENT_ID = ?;

-- name: find_employees_by_terminated, option: return_random
SELECT * FROM DBLOAD.EMPLOYEES WHERE TERMINATED = ?;

/*
 * Clients
*/

-- name: create_clients_table, scenario: setup
CREATE TABLE DBLOAD.CLIENTS (
  ID BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  NAME VARCHAR(255) NOT NULL,
  PHONE VARCHAR(100) NOT NULL,
  EMAIL VARCHAR(255) NOT NULL,
  JOB_TITLE VARCHAR(255) NOT NULL,
  POLICY TEXT
);

-- name: drop_clients_table, scenario: teardown[590]
DROP TABLE DBLOAD.CLIENTS;

-- name: create_clients_unique_index, scenario: setup
CREATE INDEX DBLOAD.CLIENTS_UNIQ_IDX ON DBLOAD.CLIENTS (NAME, EMAIL);

-- name: drop_clients_unique_index, scenario: teardown[580]
DROP INDEX DBLOAD.CLIENTS_UNIQ_IDX;

-- name: add_client
INSERT INTO DBLOAD.CLIENTS (NAME, PHONE, EMAIL, JOB_TITLE, POLICY) VALUES (?, ?, ?, ?, ?);

-- name: get_clients, option: return_random
SELECT * FROM DBLOAD.CLIENTS;

-- name: remove_client
DELETE FROM DBLOAD.CLIENTS WHERE ID = ?;

-- name: modify_client
UPDATE DBLOAD.CLIENTS SET NAME = ?, PHONE = ?, EMAIL = ?, JOB_TITLE = ?, POLICY = ? WHERE ID = ?;

-- name: count_clients
SELECT COUNT(*) FROM DBLOAD.CLIENTS;

-- name: find_clients_by_name_like
SELECT * FROM DBLOAD.CLIENTS WHERE NAME LIKE ?;

-- name: find_clients_by_phone
SELECT * FROM DBLOAD.CLIENTS WHERE PHONE = ?;

-- name: find_clients_by_email
SELECT * FROM DBLOAD.CLIENTS WHERE EMAIL = ?;

/*
 * Sales

  goods
  warehouse_stock
  warehouses
  vendor_orders
  vendors
  shop_orders
  shops
  sales
*/

-- name: create_sales_table, scenario: setup
CREATE TABLE DBLOAD.SALES (
  ID BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  SALE_DATE DATE NOT NULL,
  SALES_EMP_ID INTEGER NOT NULL,
  CLIENT_ID BIGINT NOT NULL,
  SUBJECT VARCHAR(500) NOT NULL,
  AMOUNT INTEGER NOT NULL,
  FOREIGN KEY (SALES_EMP_ID)
    REFERENCES DBLOAD.EMPLOYEES (ID),
  FOREIGN KEY (CLIENT_ID)
    REFERENCES DBLOAD.CLIENTS (ID)
);

-- name: drop_sales_table, scenario: teardown[490]
DROP TABLE DBLOAD.SALES;

-- name: create_sales_date_index, scenario: setup
CREATE INDEX DBLOAD.SALES_DATE_IDX ON DBLOAD.SALES (SALE_DATE);

-- name: drop_sales_date_index, scenario: teardown[480]
DROP INDEX DBLOAD.SALES_DATE_IDX;

-- name: create_sales_amount_index, scenario: setup
CREATE INDEX DBLOAD.SALES_AMOUNT_IDX ON DBLOAD.SALES (AMOUNT);

-- name: drop_sales_amount_index, scenario: teardown[470]
DROP INDEX DBLOAD.SALES_AMOUNT_IDX;

-- name: add_sale
INSERT INTO DBLOAD.SALES (SALE_DATE, SALES_EMP_ID, CLIENT_ID, SUBJECT, AMOUNT)
VALUES (CURRENT_DATE, ?, ?, ?, ?);

-- name: get_sales, option: return_random
SELECT * FROM DBLOAD.SALES;

-- name: remove_sale
DELETE FROM DBLOAD.SALES WHERE ID = ?;

-- name: modify_sale
UPDATE DBLOAD.SALES SET SALE_DATE = ?, SALES_EMP_ID = ?, CLIENT_ID = ?, SUBJECT = ?, AMOUNT = ? WHERE ID = ?;

-- name: count_sales
SELECT COUNT(*) FROM DBLOAD.SALES;

-- name: find_sales_earlier_than
SELECT * FROM DBLOAD.SALES WHERE SALE_DATE < ?;

-- name: find_sales_later_than
SELECT * FROM DBLOAD.SALES WHERE SALE_DATE > ?;

-- name: find_sales_larger_than
SELECT * FROM DBLOAD.SALES WHERE AMOUNT > ?;

/*
 * Analytic queries
*/

-- name: top_salesmen_last_week
SELECT E.NAME, E.BIRTHDAY, SUM(S.AMOUNT) "sales"
  FROM DBLOAD.SALES S
  LEFT JOIN DBLOAD.EMPLOYEES E ON S.SALES_EMP_ID = E.ID
  LEFT JOIN DBLOAD.DEPARTMENTS D ON E.DEPARTMENT_ID = D.ID
 WHERE S.SALE_DATE > ADD_DAYS(CURRENT_DATE, -7)
 GROUP BY E.NAME, E.BIRTHDAY
 ORDER BY "sales" DESC
 LIMIT 10;

-- name: top_clients_last_week
SELECT C.NAME, C.EMAIL, SUM(S.AMOUNT) "purchases"
  FROM DBLOAD.SALES S
  LEFT JOIN DBLOAD.CLIENTS C ON S.CLIENT_ID = C.ID
 WHERE S.SALE_DATE > ADD_DAYS(CURRENT_DATE, -7)
 GROUP BY C.NAME, C.EMAIL
 ORDER BY "purchases" DESC
 LIMIT 10;
